Source: googletest
Homepage: https://github.com/google/googletest
Section: devel
Maintainer: Steve M. Robbins <smr@debian.org>
Uploaders: Fredrik Hallenberg <hallon@debian.org>
Priority: optional
Build-Depends: debhelper (>= 11), cmake, python:native
Standards-Version: 4.1.4
Vcs-Git: https://salsa.debian.org/debian/googletest.git
Vcs-Browser: https://salsa.debian.org/debian/googletest

Package: googletest
Architecture: any
Multi-Arch: same
Section: libdevel
Depends: ${misc:Depends}
Conflicts: libgtest-dev (<< 1.8.0), google-mock (<< 1.8.0)
Replaces: libgtest-dev (<< 1.8.0), google-mock (<< 1.8.0)
Description: Google's C++ test framework sources
 This package provides sources for Google Test and Google Mock.
 .
 Google Test is a framework for writing C++ tests on a variety of
 platforms. Based on the xUnit architecture. Supports automatic test
 discovery, a rich set of assertions, user-defined assertions, death
 tests, fatal and non-fatal failures, value- and type-parameterized
 tests, various options for running the tests, and XML test report
 generation.
 .
 Google Mock is an extension of Google Test for C++ mocking.  Inspired
 by jMock, EasyMock, and Hamcrest, and designed with C++'s specifics
 in mind, it can help you derive better designs of your system and
 write better tests.
 .
 Google Mock:
 .
  - provides a declarative syntax for defining mocks,
  - can easily define partial (hybrid) mocks, which are a cross of real
    and mock objects,
  - handles functions of arbitrary types and overloaded functions,
  - comes with a rich set of matchers for validating function arguments,
  - uses an intuitive syntax for controlling the behavior of a mock,
  - does automatic verification of expectations (no record-and-replay
    needed),
  - allows arbitrary (partial) ordering constraints on
    function calls to be expressed,
  - lets a user extend it by defining new matchers and actions.
  - does not use exceptions, and
  - is easy to learn and use.
 .
 NOTE: This package does not contain a library to link against, but rather
 the source code to build the google test and mock libraries.  This enables
 building the google test and mock libraries with the same flags as the
 C++ code under test.

Package: googletest-tools
Architecture: any
Multi-Arch: same
Section: libdevel
Depends: ${misc:Depends}, python:any
Conflicts: googletest (<= 1.8.0-8)
Replaces: googletest (<= 1.8.0-8)
Description: Google's C++ test framework sources
 This package provides tools to be used with Google Test and/or Google
 Mock.

Package: libgtest-dev
Architecture: any
Multi-Arch: same
Section: libdevel
Priority: optional
Depends: ${misc:Depends}, googletest (= ${binary:Version})
Conflicts: googletest (<= 1.8.0-8)
Replaces: googletest (<= 1.8.0-8)
Description: Google's framework for writing C++ tests
 Google's framework for writing C++ tests on a variety of platforms. Based on
 the xUnit architecture. Supports automatic test discovery, a rich set of
 assertions, user-defined assertions, death tests, fatal and non-fatal failures,
 value- and type-parameterized tests, various options for running the tests, and
 XML test report generation.

Package: libgmock-dev
Architecture: any
Multi-Arch: same
Section: libdevel
Priority: optional
Depends: ${misc:Depends}, libgtest-dev (= ${binary:Version})
Conflicts: googletest (<= 1.8.0-8)
Replaces: googletest (<= 1.8.0-8)
Description: Google's framework for writing C++ tests
 Inspired by jMock, EasyMock, and Hamcrest, and designed with C++'s 
 specifics in mind, it can help you derive better designs of your 
 system and write better tests.
 .
 Google Mock:
 .
  - provides a declarative syntax for defining mocks,
  - can easily define partial (hybrid) mocks, which are a cross of real
    and mock objects,
  - handles functions of arbitrary types and overloaded functions,
  - comes with a rich set of matchers for validating function arguments,
  - uses an intuitive syntax for controlling the behavior of a mock,
  - does automatic verification of expectations (no record-and-replay
    needed),
  - allows arbitrary (partial) ordering constraints on
    function calls to be expressed,
  - lets a user extend it by defining new matchers and actions.
  - does not use exceptions, and
  - is easy to learn and use.

Package: google-mock
Architecture: any
Multi-Arch: same
Section: oldlibs
Priority: optional
Depends: ${misc:Depends}, googletest (= ${binary:Version})
Description: Google's framework for writing and using C++ mock classes
 NOTE: This is a transitional package, retained for backwards compatibility.
 New code should instead use either package libgmock-dev (for compiled lib)
 or package googletest (for lib sources).
