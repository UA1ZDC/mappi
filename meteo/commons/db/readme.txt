Описание партицирования таблиц

Партицирование (partitioning) больших таблиц - разбиение таблиц на логические части по выбранным критериям.
Партицированные таблицы призваны улучшить производительность и управляемость базами данных.

Применительно к данному проекту, партицирование используется для таблиц, содержащих оперативную информацию.
Механика следующая:
 - Таблицы партицируются по дате, т.е. в каждой части партицированной таблицы хранятся данные за одни сутки;
 - При добавлении данных в таблицу запись производится не в саму таблицу, которая указана после INTO в запросе INSERT (базовая таблица),
   а в таблицу, унаследованную от неё (дочерняя таблица);
 - За создание дочерних таблиц отвечает триггер BEFORE INSERT FOR EACH ROW, установленный на базовой таблице.
   Триггер вызывает функцию insert_into_inherited(), определённую в файле trig_func_insert_into_inherited.sql;
 - За удаление устаревших дочерних таблиц отвечает функция drop_inherited(text, timestamp), определённая в файле func_drop_inherited.sql.
   В качестве параметров она принимает название базовой таблицы и дату, старше которой должно быть произведено удаление.
   Функция возвращает количество удалённых дочерних таблиц;
 - Выборка записей производится обычным запросом "SELECT имена_полей FROM имя_базовой_таблицы WHERE условие",
   при этом СУБД возвращает выборку из всех дочерних таблиц.

Примечания:
  Во избежание ошибок выполнения триггерной функции insert_into_inherited() перед её созданием в БД настоятельно рекомендуется:
 - В теле функции проверить имя колонки, содержащей дату (dt для функции из файла trig_func_insert_into_inherited.sql);
 - Проверить и при необходимости добавить/изменить/удалить создаваемые индексы и первичный ключ;
 - Перед вызовом вставки данных в дочернюю таблицу (EXECUTE 'INSERT INTO ...' в теле функции insert_into_inherited()) по необходимости
   добавить недостающие ограничения, триггеры и т.д. для дочерней таблицы.
  
  При выполнении запроса "INSERT INTO базовая_талица ... RETURNING id" будет возвращено значение NULL, т.к. вставка происходит в дочернюю таблицу.
  Вместо RETURNING необходимо использовать запрос, подобный "INSERT INTO базовая_таблица ...; SELECT currval('<table>_<id>_seq');",
  где вместо <table> подставить имя базовой таблицы, а вместо <id> имя колонки - первичного ключа (например, gmi_data_id_seq).

Пример использования механизма: БД db_journal, таблица journal, или db_meteo, таблицы aero, gmi_data и т.д.
