// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbsettings.proto

#include "dbsettings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dbsettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DbConnection_dbsettings_2eproto;
namespace meteo {
namespace settings {
class DbConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DbConnection> _instance;
} _DbConnection_default_instance_;
class DbSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DbSettings> _instance;
} _DbSettings_default_instance_;
}  // namespace settings
}  // namespace meteo
static void InitDefaultsscc_info_DbConnection_dbsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.DefaultConstruct();
  *::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get_mutable() = std::string("localhost", 9);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get_mutable());
  ::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.DefaultConstruct();
  *::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get_mutable() = std::string("root", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get_mutable());
  ::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.DefaultConstruct();
  *::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get_mutable() = std::string("admin", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get_mutable());
  {
    void* ptr = &::meteo::settings::_DbConnection_default_instance_;
    new (ptr) ::meteo::settings::DbConnection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::meteo::settings::DbConnection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DbConnection_dbsettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DbConnection_dbsettings_2eproto}, {}};

static void InitDefaultsscc_info_DbSettings_dbsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::meteo::settings::_DbSettings_default_instance_;
    new (ptr) ::meteo::settings::DbSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::meteo::settings::DbSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DbSettings_dbsettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DbSettings_dbsettings_2eproto}, {
      &scc_info_DbConnection_dbsettings_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dbsettings_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dbsettings_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dbsettings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dbsettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbConnection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbConnection, conn_name_),
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbConnection, human_name_),
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbConnection, name_),
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbConnection, host_),
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbConnection, port_),
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbConnection, login_),
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbConnection, password_),
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbConnection, userdb_),
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbConnection, dbdriver_),
  0,
  1,
  2,
  3,
  7,
  4,
  5,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbSettings, db_connection_),
  PROTOBUF_FIELD_OFFSET(::meteo::settings::DbSettings, dbdriver_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::meteo::settings::DbConnection)},
  { 23, 30, sizeof(::meteo::settings::DbSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::meteo::settings::_DbConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::meteo::settings::_DbSettings_default_instance_),
};

const char descriptor_table_protodef_dbsettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020dbsettings.proto\022\016meteo.settings\"\342\001\n\014D"
  "bConnection\022\021\n\tconn_name\030\001 \002(\t\022\022\n\nhuman_"
  "name\030\002 \001(\t\022\014\n\004name\030\003 \002(\t\022\027\n\004host\030\004 \002(\t:\t"
  "localhost\022\022\n\004port\030\005 \001(\005:\0045432\022\023\n\005login\030\006"
  " \001(\t:\004root\022\020\n\010password\030\007 \001(\t\022\025\n\006userdb\030\010"
  " \001(\t:\005admin\0222\n\010dbdriver\030\t \001(\0162\030.meteo.se"
  "ttings.DbDriver:\006kMongo\"u\n\nDbSettings\0223\n"
  "\rdb_connection\030\001 \003(\0132\034.meteo.settings.Db"
  "Connection\0222\n\010dbdriver\030\002 \001(\0162\030.meteo.set"
  "tings.DbDriver:\006kMongo*!\n\010DbDriver\022\n\n\006kM"
  "ongo\020\001\022\t\n\005kPsql\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dbsettings_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dbsettings_2eproto_sccs[2] = {
  &scc_info_DbConnection_dbsettings_2eproto.base,
  &scc_info_DbSettings_dbsettings_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dbsettings_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dbsettings_2eproto = {
  false, false, descriptor_table_protodef_dbsettings_2eproto, "dbsettings.proto", 417,
  &descriptor_table_dbsettings_2eproto_once, descriptor_table_dbsettings_2eproto_sccs, descriptor_table_dbsettings_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_dbsettings_2eproto::offsets,
  file_level_metadata_dbsettings_2eproto, 2, file_level_enum_descriptors_dbsettings_2eproto, file_level_service_descriptors_dbsettings_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dbsettings_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dbsettings_2eproto)), true);
namespace meteo {
namespace settings {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DbDriver_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbsettings_2eproto);
  return file_level_enum_descriptors_dbsettings_2eproto[0];
}
bool DbDriver_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DbConnection::InitAsDefaultInstance() {
}
class DbConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<DbConnection>()._has_bits_);
  static void set_has_conn_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_human_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_login(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_userdb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dbdriver(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DbConnection::_i_give_permission_to_break_this_code_default_host_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DbConnection::_i_give_permission_to_break_this_code_default_login_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DbConnection::_i_give_permission_to_break_this_code_default_userdb_;
DbConnection::DbConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:meteo.settings.DbConnection)
}
DbConnection::DbConnection(const DbConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  conn_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_conn_name()) {
    conn_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_conn_name(),
      GetArena());
  }
  human_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_human_name()) {
    human_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_human_name(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  host_.UnsafeSetDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get());
  if (from._internal_has_host()) {
    host_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(), from._internal_host(),
      GetArena());
  }
  login_.UnsafeSetDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get());
  if (from._internal_has_login()) {
    login_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(), from._internal_login(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  userdb_.UnsafeSetDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get());
  if (from._internal_has_userdb()) {
    userdb_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(), from._internal_userdb(),
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&dbdriver_) -
    reinterpret_cast<char*>(&port_)) + sizeof(dbdriver_));
  // @@protoc_insertion_point(copy_constructor:meteo.settings.DbConnection)
}

void DbConnection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DbConnection_dbsettings_2eproto.base);
  conn_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  human_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get());
  login_.UnsafeSetDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userdb_.UnsafeSetDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get());
  port_ = 5432;
  dbdriver_ = 1;
}

DbConnection::~DbConnection() {
  // @@protoc_insertion_point(destructor:meteo.settings.DbConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DbConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  conn_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  human_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get());
  login_.DestroyNoArena(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userdb_.DestroyNoArena(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get());
}

void DbConnection::ArenaDtor(void* object) {
  DbConnection* _this = reinterpret_cast< DbConnection* >(object);
  (void)_this;
}
void DbConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DbConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DbConnection& DbConnection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DbConnection_dbsettings_2eproto.base);
  return *internal_default_instance();
}


void DbConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:meteo.settings.DbConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      conn_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      human_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      host_.ClearToDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(), GetArena());
    }
    if (cached_has_bits & 0x00000010u) {
      login_.ClearToDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(), GetArena());
    }
    if (cached_has_bits & 0x00000020u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      userdb_.ClearToDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(), GetArena());
    }
    port_ = 5432;
  }
  dbdriver_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string conn_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_conn_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "meteo.settings.DbConnection.conn_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string human_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_human_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "meteo.settings.DbConnection.human_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "meteo.settings.DbConnection.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string host = 4 [default = "localhost"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "meteo.settings.DbConnection.host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 5 [default = 5432];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string login = 6 [default = "root"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "meteo.settings.DbConnection.login");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "meteo.settings.DbConnection.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string userdb = 8 [default = "admin"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_userdb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "meteo.settings.DbConnection.userdb");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .meteo.settings.DbDriver dbdriver = 9 [default = kMongo];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::meteo::settings::DbDriver_IsValid(val))) {
            _internal_set_dbdriver(static_cast<::meteo::settings::DbDriver>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DbConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:meteo.settings.DbConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string conn_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_conn_name().data(), static_cast<int>(this->_internal_conn_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "meteo.settings.DbConnection.conn_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conn_name(), target);
  }

  // optional string human_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_human_name().data(), static_cast<int>(this->_internal_human_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "meteo.settings.DbConnection.human_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_human_name(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "meteo.settings.DbConnection.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // required string host = 4 [default = "localhost"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "meteo.settings.DbConnection.host");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_host(), target);
  }

  // optional int32 port = 5 [default = 5432];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_port(), target);
  }

  // optional string login = 6 [default = "root"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "meteo.settings.DbConnection.login");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_login(), target);
  }

  // optional string password = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "meteo.settings.DbConnection.password");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_password(), target);
  }

  // optional string userdb = 8 [default = "admin"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_userdb().data(), static_cast<int>(this->_internal_userdb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "meteo.settings.DbConnection.userdb");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_userdb(), target);
  }

  // optional .meteo.settings.DbDriver dbdriver = 9 [default = kMongo];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_dbdriver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meteo.settings.DbConnection)
  return target;
}

size_t DbConnection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:meteo.settings.DbConnection)
  size_t total_size = 0;

  if (_internal_has_conn_name()) {
    // required string conn_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conn_name());
  }

  if (_internal_has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_host()) {
    // required string host = 4 [default = "localhost"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  return total_size;
}
size_t DbConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:meteo.settings.DbConnection)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string conn_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conn_name());

    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string host = 4 [default = "localhost"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string human_name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_human_name());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional string login = 6 [default = "root"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login());
    }

    // optional string password = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string userdb = 8 [default = "admin"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_userdb());
    }

    // optional int32 port = 5 [default = 5432];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

  }
  // optional .meteo.settings.DbDriver dbdriver = 9 [default = kMongo];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dbdriver());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DbConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:meteo.settings.DbConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const DbConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DbConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:meteo.settings.DbConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:meteo.settings.DbConnection)
    MergeFrom(*source);
  }
}

void DbConnection::MergeFrom(const DbConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:meteo.settings.DbConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_conn_name(from._internal_conn_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_human_name(from._internal_human_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_host(from._internal_host());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_login(from._internal_login());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_userdb(from._internal_userdb());
    }
    if (cached_has_bits & 0x00000080u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_dbdriver(from._internal_dbdriver());
  }
}

void DbConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:meteo.settings.DbConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbConnection::CopyFrom(const DbConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meteo.settings.DbConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbConnection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DbConnection::InternalSwap(DbConnection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  conn_name_.Swap(&other->conn_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  human_name_.Swap(&other->human_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(), GetArena());
  login_.Swap(&other->login_, &::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userdb_.Swap(&other->userdb_, &::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(), GetArena());
  swap(port_, other->port_);
  swap(dbdriver_, other->dbdriver_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DbConnection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DbSettings::InitAsDefaultInstance() {
}
class DbSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<DbSettings>()._has_bits_);
  static void set_has_dbdriver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DbSettings::DbSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  db_connection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:meteo.settings.DbSettings)
}
DbSettings::DbSettings(const DbSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      db_connection_(from.db_connection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dbdriver_ = from.dbdriver_;
  // @@protoc_insertion_point(copy_constructor:meteo.settings.DbSettings)
}

void DbSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DbSettings_dbsettings_2eproto.base);
  dbdriver_ = 1;
}

DbSettings::~DbSettings() {
  // @@protoc_insertion_point(destructor:meteo.settings.DbSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DbSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DbSettings::ArenaDtor(void* object) {
  DbSettings* _this = reinterpret_cast< DbSettings* >(object);
  (void)_this;
}
void DbSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DbSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DbSettings& DbSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DbSettings_dbsettings_2eproto.base);
  return *internal_default_instance();
}


void DbSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:meteo.settings.DbSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_connection_.Clear();
  dbdriver_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .meteo.settings.DbConnection db_connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_db_connection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .meteo.settings.DbDriver dbdriver = 2 [default = kMongo];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::meteo::settings::DbDriver_IsValid(val))) {
            _internal_set_dbdriver(static_cast<::meteo::settings::DbDriver>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DbSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:meteo.settings.DbSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .meteo.settings.DbConnection db_connection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_db_connection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_db_connection(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .meteo.settings.DbDriver dbdriver = 2 [default = kMongo];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dbdriver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meteo.settings.DbSettings)
  return target;
}

size_t DbSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:meteo.settings.DbSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .meteo.settings.DbConnection db_connection = 1;
  total_size += 1UL * this->_internal_db_connection_size();
  for (const auto& msg : this->db_connection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .meteo.settings.DbDriver dbdriver = 2 [default = kMongo];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dbdriver());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DbSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:meteo.settings.DbSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const DbSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DbSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:meteo.settings.DbSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:meteo.settings.DbSettings)
    MergeFrom(*source);
  }
}

void DbSettings::MergeFrom(const DbSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:meteo.settings.DbSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  db_connection_.MergeFrom(from.db_connection_);
  if (from._internal_has_dbdriver()) {
    _internal_set_dbdriver(from._internal_dbdriver());
  }
}

void DbSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:meteo.settings.DbSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbSettings::CopyFrom(const DbSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meteo.settings.DbSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbSettings::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(db_connection_)) return false;
  return true;
}

void DbSettings::InternalSwap(DbSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  db_connection_.InternalSwap(&other->db_connection_);
  swap(dbdriver_, other->dbdriver_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DbSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace settings
}  // namespace meteo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::meteo::settings::DbConnection* Arena::CreateMaybeMessage< ::meteo::settings::DbConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::meteo::settings::DbConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::meteo::settings::DbSettings* Arena::CreateMaybeMessage< ::meteo::settings::DbSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::meteo::settings::DbSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
