// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbsettings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dbsettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dbsettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dbsettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dbsettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dbsettings_2eproto;
namespace meteo {
namespace settings {
class DbConnection;
class DbConnectionDefaultTypeInternal;
extern DbConnectionDefaultTypeInternal _DbConnection_default_instance_;
class DbSettings;
class DbSettingsDefaultTypeInternal;
extern DbSettingsDefaultTypeInternal _DbSettings_default_instance_;
}  // namespace settings
}  // namespace meteo
PROTOBUF_NAMESPACE_OPEN
template<> ::meteo::settings::DbConnection* Arena::CreateMaybeMessage<::meteo::settings::DbConnection>(Arena*);
template<> ::meteo::settings::DbSettings* Arena::CreateMaybeMessage<::meteo::settings::DbSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace meteo {
namespace settings {

enum DbDriver : int {
  kMongo = 1,
  kPsql = 2
};
bool DbDriver_IsValid(int value);
constexpr DbDriver DbDriver_MIN = kMongo;
constexpr DbDriver DbDriver_MAX = kPsql;
constexpr int DbDriver_ARRAYSIZE = DbDriver_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DbDriver_descriptor();
template<typename T>
inline const std::string& DbDriver_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DbDriver>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DbDriver_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DbDriver_descriptor(), enum_t_value);
}
inline bool DbDriver_Parse(
    const std::string& name, DbDriver* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DbDriver>(
    DbDriver_descriptor(), name, value);
}
// ===================================================================

class DbConnection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:meteo.settings.DbConnection) */ {
 public:
  inline DbConnection() : DbConnection(nullptr) {};
  virtual ~DbConnection();

  DbConnection(const DbConnection& from);
  DbConnection(DbConnection&& from) noexcept
    : DbConnection() {
    *this = ::std::move(from);
  }

  inline DbConnection& operator=(const DbConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbConnection& operator=(DbConnection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DbConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbConnection* internal_default_instance() {
    return reinterpret_cast<const DbConnection*>(
               &_DbConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DbConnection& a, DbConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(DbConnection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DbConnection* New() const final {
    return CreateMaybeMessage<DbConnection>(nullptr);
  }

  DbConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DbConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DbConnection& from);
  void MergeFrom(const DbConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DbConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "meteo.settings.DbConnection";
  }
  protected:
  explicit DbConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbsettings_2eproto);
    return ::descriptor_table_dbsettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnNameFieldNumber = 1,
    kHumanNameFieldNumber = 2,
    kNameFieldNumber = 3,
    kHostFieldNumber = 4,
    kLoginFieldNumber = 6,
    kPasswordFieldNumber = 7,
    kUserdbFieldNumber = 8,
    kPortFieldNumber = 5,
    kDbdriverFieldNumber = 9,
  };
  // required string conn_name = 1;
  bool has_conn_name() const;
  private:
  bool _internal_has_conn_name() const;
  public:
  void clear_conn_name();
  const std::string& conn_name() const;
  void set_conn_name(const std::string& value);
  void set_conn_name(std::string&& value);
  void set_conn_name(const char* value);
  void set_conn_name(const char* value, size_t size);
  std::string* mutable_conn_name();
  std::string* release_conn_name();
  void set_allocated_conn_name(std::string* conn_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_conn_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_conn_name(
      std::string* conn_name);
  private:
  const std::string& _internal_conn_name() const;
  void _internal_set_conn_name(const std::string& value);
  std::string* _internal_mutable_conn_name();
  public:

  // optional string human_name = 2;
  bool has_human_name() const;
  private:
  bool _internal_has_human_name() const;
  public:
  void clear_human_name();
  const std::string& human_name() const;
  void set_human_name(const std::string& value);
  void set_human_name(std::string&& value);
  void set_human_name(const char* value);
  void set_human_name(const char* value, size_t size);
  std::string* mutable_human_name();
  std::string* release_human_name();
  void set_allocated_human_name(std::string* human_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_human_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_human_name(
      std::string* human_name);
  private:
  const std::string& _internal_human_name() const;
  void _internal_set_human_name(const std::string& value);
  std::string* _internal_mutable_human_name();
  public:

  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string host = 4 [default = "localhost"];
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_host(
      std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // optional string login = 6 [default = "root"];
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login(
      std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // optional string password = 7;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string userdb = 8 [default = "admin"];
  bool has_userdb() const;
  private:
  bool _internal_has_userdb() const;
  public:
  void clear_userdb();
  const std::string& userdb() const;
  void set_userdb(const std::string& value);
  void set_userdb(std::string&& value);
  void set_userdb(const char* value);
  void set_userdb(const char* value, size_t size);
  std::string* mutable_userdb();
  std::string* release_userdb();
  void set_allocated_userdb(std::string* userdb);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userdb();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userdb(
      std::string* userdb);
  private:
  const std::string& _internal_userdb() const;
  void _internal_set_userdb(const std::string& value);
  std::string* _internal_mutable_userdb();
  public:

  // optional int32 port = 5 [default = 5432];
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .meteo.settings.DbDriver dbdriver = 9 [default = kMongo];
  bool has_dbdriver() const;
  private:
  bool _internal_has_dbdriver() const;
  public:
  void clear_dbdriver();
  ::meteo::settings::DbDriver dbdriver() const;
  void set_dbdriver(::meteo::settings::DbDriver value);
  private:
  ::meteo::settings::DbDriver _internal_dbdriver() const;
  void _internal_set_dbdriver(::meteo::settings::DbDriver value);
  public:

  // @@protoc_insertion_point(class_scope:meteo.settings.DbConnection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conn_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr human_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_host_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_login_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_userdb_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userdb_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int dbdriver_;
  friend struct ::TableStruct_dbsettings_2eproto;
};
// -------------------------------------------------------------------

class DbSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:meteo.settings.DbSettings) */ {
 public:
  inline DbSettings() : DbSettings(nullptr) {};
  virtual ~DbSettings();

  DbSettings(const DbSettings& from);
  DbSettings(DbSettings&& from) noexcept
    : DbSettings() {
    *this = ::std::move(from);
  }

  inline DbSettings& operator=(const DbSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbSettings& operator=(DbSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DbSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbSettings* internal_default_instance() {
    return reinterpret_cast<const DbSettings*>(
               &_DbSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DbSettings& a, DbSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(DbSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DbSettings* New() const final {
    return CreateMaybeMessage<DbSettings>(nullptr);
  }

  DbSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DbSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DbSettings& from);
  void MergeFrom(const DbSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DbSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "meteo.settings.DbSettings";
  }
  protected:
  explicit DbSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbsettings_2eproto);
    return ::descriptor_table_dbsettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbConnectionFieldNumber = 1,
    kDbdriverFieldNumber = 2,
  };
  // repeated .meteo.settings.DbConnection db_connection = 1;
  int db_connection_size() const;
  private:
  int _internal_db_connection_size() const;
  public:
  void clear_db_connection();
  ::meteo::settings::DbConnection* mutable_db_connection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::meteo::settings::DbConnection >*
      mutable_db_connection();
  private:
  const ::meteo::settings::DbConnection& _internal_db_connection(int index) const;
  ::meteo::settings::DbConnection* _internal_add_db_connection();
  public:
  const ::meteo::settings::DbConnection& db_connection(int index) const;
  ::meteo::settings::DbConnection* add_db_connection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::meteo::settings::DbConnection >&
      db_connection() const;

  // optional .meteo.settings.DbDriver dbdriver = 2 [default = kMongo];
  bool has_dbdriver() const;
  private:
  bool _internal_has_dbdriver() const;
  public:
  void clear_dbdriver();
  ::meteo::settings::DbDriver dbdriver() const;
  void set_dbdriver(::meteo::settings::DbDriver value);
  private:
  ::meteo::settings::DbDriver _internal_dbdriver() const;
  void _internal_set_dbdriver(::meteo::settings::DbDriver value);
  public:

  // @@protoc_insertion_point(class_scope:meteo.settings.DbSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::meteo::settings::DbConnection > db_connection_;
  int dbdriver_;
  friend struct ::TableStruct_dbsettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DbConnection

// required string conn_name = 1;
inline bool DbConnection::_internal_has_conn_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DbConnection::has_conn_name() const {
  return _internal_has_conn_name();
}
inline void DbConnection::clear_conn_name() {
  conn_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DbConnection::conn_name() const {
  // @@protoc_insertion_point(field_get:meteo.settings.DbConnection.conn_name)
  return _internal_conn_name();
}
inline void DbConnection::set_conn_name(const std::string& value) {
  _internal_set_conn_name(value);
  // @@protoc_insertion_point(field_set:meteo.settings.DbConnection.conn_name)
}
inline std::string* DbConnection::mutable_conn_name() {
  // @@protoc_insertion_point(field_mutable:meteo.settings.DbConnection.conn_name)
  return _internal_mutable_conn_name();
}
inline const std::string& DbConnection::_internal_conn_name() const {
  return conn_name_.Get();
}
inline void DbConnection::_internal_set_conn_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  conn_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DbConnection::set_conn_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  conn_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:meteo.settings.DbConnection.conn_name)
}
inline void DbConnection::set_conn_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  conn_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:meteo.settings.DbConnection.conn_name)
}
inline void DbConnection::set_conn_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  conn_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:meteo.settings.DbConnection.conn_name)
}
inline std::string* DbConnection::_internal_mutable_conn_name() {
  _has_bits_[0] |= 0x00000001u;
  return conn_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DbConnection::release_conn_name() {
  // @@protoc_insertion_point(field_release:meteo.settings.DbConnection.conn_name)
  if (!_internal_has_conn_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return conn_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DbConnection::set_allocated_conn_name(std::string* conn_name) {
  if (conn_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  conn_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conn_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:meteo.settings.DbConnection.conn_name)
}
inline std::string* DbConnection::unsafe_arena_release_conn_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meteo.settings.DbConnection.conn_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return conn_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DbConnection::unsafe_arena_set_allocated_conn_name(
    std::string* conn_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (conn_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  conn_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      conn_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meteo.settings.DbConnection.conn_name)
}

// optional string human_name = 2;
inline bool DbConnection::_internal_has_human_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DbConnection::has_human_name() const {
  return _internal_has_human_name();
}
inline void DbConnection::clear_human_name() {
  human_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DbConnection::human_name() const {
  // @@protoc_insertion_point(field_get:meteo.settings.DbConnection.human_name)
  return _internal_human_name();
}
inline void DbConnection::set_human_name(const std::string& value) {
  _internal_set_human_name(value);
  // @@protoc_insertion_point(field_set:meteo.settings.DbConnection.human_name)
}
inline std::string* DbConnection::mutable_human_name() {
  // @@protoc_insertion_point(field_mutable:meteo.settings.DbConnection.human_name)
  return _internal_mutable_human_name();
}
inline const std::string& DbConnection::_internal_human_name() const {
  return human_name_.Get();
}
inline void DbConnection::_internal_set_human_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  human_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DbConnection::set_human_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  human_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:meteo.settings.DbConnection.human_name)
}
inline void DbConnection::set_human_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  human_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:meteo.settings.DbConnection.human_name)
}
inline void DbConnection::set_human_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  human_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:meteo.settings.DbConnection.human_name)
}
inline std::string* DbConnection::_internal_mutable_human_name() {
  _has_bits_[0] |= 0x00000002u;
  return human_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DbConnection::release_human_name() {
  // @@protoc_insertion_point(field_release:meteo.settings.DbConnection.human_name)
  if (!_internal_has_human_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return human_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DbConnection::set_allocated_human_name(std::string* human_name) {
  if (human_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  human_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), human_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:meteo.settings.DbConnection.human_name)
}
inline std::string* DbConnection::unsafe_arena_release_human_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meteo.settings.DbConnection.human_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return human_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DbConnection::unsafe_arena_set_allocated_human_name(
    std::string* human_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (human_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  human_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      human_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meteo.settings.DbConnection.human_name)
}

// required string name = 3;
inline bool DbConnection::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DbConnection::has_name() const {
  return _internal_has_name();
}
inline void DbConnection::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DbConnection::name() const {
  // @@protoc_insertion_point(field_get:meteo.settings.DbConnection.name)
  return _internal_name();
}
inline void DbConnection::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:meteo.settings.DbConnection.name)
}
inline std::string* DbConnection::mutable_name() {
  // @@protoc_insertion_point(field_mutable:meteo.settings.DbConnection.name)
  return _internal_mutable_name();
}
inline const std::string& DbConnection::_internal_name() const {
  return name_.Get();
}
inline void DbConnection::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DbConnection::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:meteo.settings.DbConnection.name)
}
inline void DbConnection::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:meteo.settings.DbConnection.name)
}
inline void DbConnection::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:meteo.settings.DbConnection.name)
}
inline std::string* DbConnection::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DbConnection::release_name() {
  // @@protoc_insertion_point(field_release:meteo.settings.DbConnection.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DbConnection::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:meteo.settings.DbConnection.name)
}
inline std::string* DbConnection::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meteo.settings.DbConnection.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DbConnection::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meteo.settings.DbConnection.name)
}

// required string host = 4 [default = "localhost"];
inline bool DbConnection::_internal_has_host() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DbConnection::has_host() const {
  return _internal_has_host();
}
inline void DbConnection::clear_host() {
  host_.ClearToDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DbConnection::host() const {
  // @@protoc_insertion_point(field_get:meteo.settings.DbConnection.host)
  return _internal_host();
}
inline void DbConnection::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:meteo.settings.DbConnection.host)
}
inline std::string* DbConnection::mutable_host() {
  // @@protoc_insertion_point(field_mutable:meteo.settings.DbConnection.host)
  return _internal_mutable_host();
}
inline const std::string& DbConnection::_internal_host() const {
  return host_.Get();
}
inline void DbConnection::_internal_set_host(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  host_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(), value, GetArena());
}
inline void DbConnection::set_host(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  host_.Set(
    &::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:meteo.settings.DbConnection.host)
}
inline void DbConnection::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  host_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:meteo.settings.DbConnection.host)
}
inline void DbConnection::set_host(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  host_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:meteo.settings.DbConnection.host)
}
inline std::string* DbConnection::_internal_mutable_host() {
  _has_bits_[0] |= 0x00000008u;
  return host_.Mutable(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(), GetArena());
}
inline std::string* DbConnection::release_host() {
  // @@protoc_insertion_point(field_release:meteo.settings.DbConnection.host)
  if (!_internal_has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return host_.ReleaseNonDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(), GetArena());
}
inline void DbConnection::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  host_.SetAllocated(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:meteo.settings.DbConnection.host)
}
inline std::string* DbConnection::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meteo.settings.DbConnection.host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return host_.UnsafeArenaRelease(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(),
      GetArena());
}
inline void DbConnection::unsafe_arena_set_allocated_host(
    std::string* host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  host_.UnsafeArenaSetAllocated(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_host_.get(),
      host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meteo.settings.DbConnection.host)
}

// optional int32 port = 5 [default = 5432];
inline bool DbConnection::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DbConnection::has_port() const {
  return _internal_has_port();
}
inline void DbConnection::clear_port() {
  port_ = 5432;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DbConnection::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DbConnection::port() const {
  // @@protoc_insertion_point(field_get:meteo.settings.DbConnection.port)
  return _internal_port();
}
inline void DbConnection::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  port_ = value;
}
inline void DbConnection::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:meteo.settings.DbConnection.port)
}

// optional string login = 6 [default = "root"];
inline bool DbConnection::_internal_has_login() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DbConnection::has_login() const {
  return _internal_has_login();
}
inline void DbConnection::clear_login() {
  login_.ClearToDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DbConnection::login() const {
  // @@protoc_insertion_point(field_get:meteo.settings.DbConnection.login)
  return _internal_login();
}
inline void DbConnection::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:meteo.settings.DbConnection.login)
}
inline std::string* DbConnection::mutable_login() {
  // @@protoc_insertion_point(field_mutable:meteo.settings.DbConnection.login)
  return _internal_mutable_login();
}
inline const std::string& DbConnection::_internal_login() const {
  return login_.Get();
}
inline void DbConnection::_internal_set_login(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  login_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(), value, GetArena());
}
inline void DbConnection::set_login(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  login_.Set(
    &::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:meteo.settings.DbConnection.login)
}
inline void DbConnection::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  login_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:meteo.settings.DbConnection.login)
}
inline void DbConnection::set_login(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  login_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:meteo.settings.DbConnection.login)
}
inline std::string* DbConnection::_internal_mutable_login() {
  _has_bits_[0] |= 0x00000010u;
  return login_.Mutable(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(), GetArena());
}
inline std::string* DbConnection::release_login() {
  // @@protoc_insertion_point(field_release:meteo.settings.DbConnection.login)
  if (!_internal_has_login()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return login_.ReleaseNonDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(), GetArena());
}
inline void DbConnection::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  login_.SetAllocated(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:meteo.settings.DbConnection.login)
}
inline std::string* DbConnection::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meteo.settings.DbConnection.login)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return login_.UnsafeArenaRelease(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(),
      GetArena());
}
inline void DbConnection::unsafe_arena_set_allocated_login(
    std::string* login) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  login_.UnsafeArenaSetAllocated(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_login_.get(),
      login, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meteo.settings.DbConnection.login)
}

// optional string password = 7;
inline bool DbConnection::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DbConnection::has_password() const {
  return _internal_has_password();
}
inline void DbConnection::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& DbConnection::password() const {
  // @@protoc_insertion_point(field_get:meteo.settings.DbConnection.password)
  return _internal_password();
}
inline void DbConnection::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:meteo.settings.DbConnection.password)
}
inline std::string* DbConnection::mutable_password() {
  // @@protoc_insertion_point(field_mutable:meteo.settings.DbConnection.password)
  return _internal_mutable_password();
}
inline const std::string& DbConnection::_internal_password() const {
  return password_.Get();
}
inline void DbConnection::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DbConnection::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:meteo.settings.DbConnection.password)
}
inline void DbConnection::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:meteo.settings.DbConnection.password)
}
inline void DbConnection::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:meteo.settings.DbConnection.password)
}
inline std::string* DbConnection::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000020u;
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DbConnection::release_password() {
  // @@protoc_insertion_point(field_release:meteo.settings.DbConnection.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DbConnection::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:meteo.settings.DbConnection.password)
}
inline std::string* DbConnection::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meteo.settings.DbConnection.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DbConnection::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meteo.settings.DbConnection.password)
}

// optional string userdb = 8 [default = "admin"];
inline bool DbConnection::_internal_has_userdb() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DbConnection::has_userdb() const {
  return _internal_has_userdb();
}
inline void DbConnection::clear_userdb() {
  userdb_.ClearToDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& DbConnection::userdb() const {
  // @@protoc_insertion_point(field_get:meteo.settings.DbConnection.userdb)
  return _internal_userdb();
}
inline void DbConnection::set_userdb(const std::string& value) {
  _internal_set_userdb(value);
  // @@protoc_insertion_point(field_set:meteo.settings.DbConnection.userdb)
}
inline std::string* DbConnection::mutable_userdb() {
  // @@protoc_insertion_point(field_mutable:meteo.settings.DbConnection.userdb)
  return _internal_mutable_userdb();
}
inline const std::string& DbConnection::_internal_userdb() const {
  return userdb_.Get();
}
inline void DbConnection::_internal_set_userdb(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  userdb_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(), value, GetArena());
}
inline void DbConnection::set_userdb(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  userdb_.Set(
    &::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:meteo.settings.DbConnection.userdb)
}
inline void DbConnection::set_userdb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  userdb_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:meteo.settings.DbConnection.userdb)
}
inline void DbConnection::set_userdb(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  userdb_.Set(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:meteo.settings.DbConnection.userdb)
}
inline std::string* DbConnection::_internal_mutable_userdb() {
  _has_bits_[0] |= 0x00000040u;
  return userdb_.Mutable(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(), GetArena());
}
inline std::string* DbConnection::release_userdb() {
  // @@protoc_insertion_point(field_release:meteo.settings.DbConnection.userdb)
  if (!_internal_has_userdb()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return userdb_.ReleaseNonDefault(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(), GetArena());
}
inline void DbConnection::set_allocated_userdb(std::string* userdb) {
  if (userdb != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  userdb_.SetAllocated(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(), userdb,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:meteo.settings.DbConnection.userdb)
}
inline std::string* DbConnection::unsafe_arena_release_userdb() {
  // @@protoc_insertion_point(field_unsafe_arena_release:meteo.settings.DbConnection.userdb)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return userdb_.UnsafeArenaRelease(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(),
      GetArena());
}
inline void DbConnection::unsafe_arena_set_allocated_userdb(
    std::string* userdb) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userdb != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  userdb_.UnsafeArenaSetAllocated(&::meteo::settings::DbConnection::_i_give_permission_to_break_this_code_default_userdb_.get(),
      userdb, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meteo.settings.DbConnection.userdb)
}

// optional .meteo.settings.DbDriver dbdriver = 9 [default = kMongo];
inline bool DbConnection::_internal_has_dbdriver() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DbConnection::has_dbdriver() const {
  return _internal_has_dbdriver();
}
inline void DbConnection::clear_dbdriver() {
  dbdriver_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::meteo::settings::DbDriver DbConnection::_internal_dbdriver() const {
  return static_cast< ::meteo::settings::DbDriver >(dbdriver_);
}
inline ::meteo::settings::DbDriver DbConnection::dbdriver() const {
  // @@protoc_insertion_point(field_get:meteo.settings.DbConnection.dbdriver)
  return _internal_dbdriver();
}
inline void DbConnection::_internal_set_dbdriver(::meteo::settings::DbDriver value) {
  assert(::meteo::settings::DbDriver_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  dbdriver_ = value;
}
inline void DbConnection::set_dbdriver(::meteo::settings::DbDriver value) {
  _internal_set_dbdriver(value);
  // @@protoc_insertion_point(field_set:meteo.settings.DbConnection.dbdriver)
}

// -------------------------------------------------------------------

// DbSettings

// repeated .meteo.settings.DbConnection db_connection = 1;
inline int DbSettings::_internal_db_connection_size() const {
  return db_connection_.size();
}
inline int DbSettings::db_connection_size() const {
  return _internal_db_connection_size();
}
inline void DbSettings::clear_db_connection() {
  db_connection_.Clear();
}
inline ::meteo::settings::DbConnection* DbSettings::mutable_db_connection(int index) {
  // @@protoc_insertion_point(field_mutable:meteo.settings.DbSettings.db_connection)
  return db_connection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::meteo::settings::DbConnection >*
DbSettings::mutable_db_connection() {
  // @@protoc_insertion_point(field_mutable_list:meteo.settings.DbSettings.db_connection)
  return &db_connection_;
}
inline const ::meteo::settings::DbConnection& DbSettings::_internal_db_connection(int index) const {
  return db_connection_.Get(index);
}
inline const ::meteo::settings::DbConnection& DbSettings::db_connection(int index) const {
  // @@protoc_insertion_point(field_get:meteo.settings.DbSettings.db_connection)
  return _internal_db_connection(index);
}
inline ::meteo::settings::DbConnection* DbSettings::_internal_add_db_connection() {
  return db_connection_.Add();
}
inline ::meteo::settings::DbConnection* DbSettings::add_db_connection() {
  // @@protoc_insertion_point(field_add:meteo.settings.DbSettings.db_connection)
  return _internal_add_db_connection();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::meteo::settings::DbConnection >&
DbSettings::db_connection() const {
  // @@protoc_insertion_point(field_list:meteo.settings.DbSettings.db_connection)
  return db_connection_;
}

// optional .meteo.settings.DbDriver dbdriver = 2 [default = kMongo];
inline bool DbSettings::_internal_has_dbdriver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DbSettings::has_dbdriver() const {
  return _internal_has_dbdriver();
}
inline void DbSettings::clear_dbdriver() {
  dbdriver_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::meteo::settings::DbDriver DbSettings::_internal_dbdriver() const {
  return static_cast< ::meteo::settings::DbDriver >(dbdriver_);
}
inline ::meteo::settings::DbDriver DbSettings::dbdriver() const {
  // @@protoc_insertion_point(field_get:meteo.settings.DbSettings.dbdriver)
  return _internal_dbdriver();
}
inline void DbSettings::_internal_set_dbdriver(::meteo::settings::DbDriver value) {
  assert(::meteo::settings::DbDriver_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  dbdriver_ = value;
}
inline void DbSettings::set_dbdriver(::meteo::settings::DbDriver value) {
  _internal_set_dbdriver(value);
  // @@protoc_insertion_point(field_set:meteo.settings.DbSettings.dbdriver)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace settings
}  // namespace meteo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::meteo::settings::DbDriver> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::meteo::settings::DbDriver>() {
  return ::meteo::settings::DbDriver_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dbsettings_2eproto
