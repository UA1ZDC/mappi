// source: dbsettings.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.meteo.settings.DbConnection');
goog.provide('proto.meteo.settings.DbDriver');
goog.provide('proto.meteo.settings.DbSettings');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meteo.settings.DbConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.meteo.settings.DbConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meteo.settings.DbConnection.displayName = 'proto.meteo.settings.DbConnection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.meteo.settings.DbSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.meteo.settings.DbSettings.repeatedFields_, null);
};
goog.inherits(proto.meteo.settings.DbSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.meteo.settings.DbSettings.displayName = 'proto.meteo.settings.DbSettings';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meteo.settings.DbConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.meteo.settings.DbConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meteo.settings.DbConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meteo.settings.DbConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    connName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    humanName: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    host: jspb.Message.getFieldWithDefault(msg, 4, "localhost"),
    port: jspb.Message.getFieldWithDefault(msg, 5, 5432),
    login: jspb.Message.getFieldWithDefault(msg, 6, "root"),
    password: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    userdb: jspb.Message.getFieldWithDefault(msg, 8, "admin"),
    dbdriver: jspb.Message.getFieldWithDefault(msg, 9, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meteo.settings.DbConnection}
 */
proto.meteo.settings.DbConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meteo.settings.DbConnection;
  return proto.meteo.settings.DbConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meteo.settings.DbConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meteo.settings.DbConnection}
 */
proto.meteo.settings.DbConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHumanName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserdb(value);
      break;
    case 9:
      var value = /** @type {!proto.meteo.settings.DbDriver} */ (reader.readEnum());
      msg.setDbdriver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meteo.settings.DbConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meteo.settings.DbConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meteo.settings.DbConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meteo.settings.DbConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {!proto.meteo.settings.DbDriver} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * required string conn_name = 1;
 * @return {string}
 */
proto.meteo.settings.DbConnection.prototype.getConnName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.setConnName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.clearConnName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meteo.settings.DbConnection.prototype.hasConnName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string human_name = 2;
 * @return {string}
 */
proto.meteo.settings.DbConnection.prototype.getHumanName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.setHumanName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.clearHumanName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meteo.settings.DbConnection.prototype.hasHumanName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string name = 3;
 * @return {string}
 */
proto.meteo.settings.DbConnection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meteo.settings.DbConnection.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string host = 4;
 * @return {string}
 */
proto.meteo.settings.DbConnection.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "localhost"));
};


/**
 * @param {string} value
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.setHost = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.clearHost = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meteo.settings.DbConnection.prototype.hasHost = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 port = 5;
 * @return {number}
 */
proto.meteo.settings.DbConnection.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 5432));
};


/**
 * @param {number} value
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.setPort = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.clearPort = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meteo.settings.DbConnection.prototype.hasPort = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string login = 6;
 * @return {string}
 */
proto.meteo.settings.DbConnection.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "root"));
};


/**
 * @param {string} value
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.setLogin = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.clearLogin = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meteo.settings.DbConnection.prototype.hasLogin = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string password = 7;
 * @return {string}
 */
proto.meteo.settings.DbConnection.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.setPassword = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.clearPassword = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meteo.settings.DbConnection.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string userdb = 8;
 * @return {string}
 */
proto.meteo.settings.DbConnection.prototype.getUserdb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "admin"));
};


/**
 * @param {string} value
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.setUserdb = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.clearUserdb = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meteo.settings.DbConnection.prototype.hasUserdb = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional DbDriver dbdriver = 9;
 * @return {!proto.meteo.settings.DbDriver}
 */
proto.meteo.settings.DbConnection.prototype.getDbdriver = function() {
  return /** @type {!proto.meteo.settings.DbDriver} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/**
 * @param {!proto.meteo.settings.DbDriver} value
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.setDbdriver = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meteo.settings.DbConnection} returns this
 */
proto.meteo.settings.DbConnection.prototype.clearDbdriver = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meteo.settings.DbConnection.prototype.hasDbdriver = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.meteo.settings.DbSettings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.meteo.settings.DbSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.meteo.settings.DbSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.meteo.settings.DbSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meteo.settings.DbSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbConnectionList: jspb.Message.toObjectList(msg.getDbConnectionList(),
    proto.meteo.settings.DbConnection.toObject, includeInstance),
    dbdriver: jspb.Message.getFieldWithDefault(msg, 2, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.meteo.settings.DbSettings}
 */
proto.meteo.settings.DbSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.meteo.settings.DbSettings;
  return proto.meteo.settings.DbSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.meteo.settings.DbSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.meteo.settings.DbSettings}
 */
proto.meteo.settings.DbSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.meteo.settings.DbConnection;
      reader.readMessage(value,proto.meteo.settings.DbConnection.deserializeBinaryFromReader);
      msg.addDbConnection(value);
      break;
    case 2:
      var value = /** @type {!proto.meteo.settings.DbDriver} */ (reader.readEnum());
      msg.setDbdriver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.meteo.settings.DbSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.meteo.settings.DbSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.meteo.settings.DbSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.meteo.settings.DbSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbConnectionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.meteo.settings.DbConnection.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.meteo.settings.DbDriver} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated DbConnection db_connection = 1;
 * @return {!Array<!proto.meteo.settings.DbConnection>}
 */
proto.meteo.settings.DbSettings.prototype.getDbConnectionList = function() {
  return /** @type{!Array<!proto.meteo.settings.DbConnection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.meteo.settings.DbConnection, 1));
};


/**
 * @param {!Array<!proto.meteo.settings.DbConnection>} value
 * @return {!proto.meteo.settings.DbSettings} returns this
*/
proto.meteo.settings.DbSettings.prototype.setDbConnectionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.meteo.settings.DbConnection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.meteo.settings.DbConnection}
 */
proto.meteo.settings.DbSettings.prototype.addDbConnection = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.meteo.settings.DbConnection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.meteo.settings.DbSettings} returns this
 */
proto.meteo.settings.DbSettings.prototype.clearDbConnectionList = function() {
  return this.setDbConnectionList([]);
};


/**
 * optional DbDriver dbdriver = 2;
 * @return {!proto.meteo.settings.DbDriver}
 */
proto.meteo.settings.DbSettings.prototype.getDbdriver = function() {
  return /** @type {!proto.meteo.settings.DbDriver} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.meteo.settings.DbDriver} value
 * @return {!proto.meteo.settings.DbSettings} returns this
 */
proto.meteo.settings.DbSettings.prototype.setDbdriver = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.meteo.settings.DbSettings} returns this
 */
proto.meteo.settings.DbSettings.prototype.clearDbdriver = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.meteo.settings.DbSettings.prototype.hasDbdriver = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.meteo.settings.DbDriver = {
  KMONGO: 1,
  KPSQL: 2
};

